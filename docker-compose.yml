version: '3.8'

services:
  scraperr: # Фронтенд
    image: jpyles0524/scraperr:latest
    command: ["npm", "run", "start"]
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} # Это будет переопределено из Coolify UI
      - SERVER_URL=${SERVER_URL}                   # Это будет переопределено из Coolify UI
    ports:
      # Coolify будет использовать переменную ${scraperr_port} из Environment Variables,
      # чтобы определить полный маппинг (например, "8180:3000").
      # Сам Scraperr фронтенд внутри контейнера слушает на порту 3000.
      - "${scraperr_port:-3000}" # Если scraperr_port не задан, используй 3000 как внутренний порт
                                  # Coolify должен заменить это на что-то вроде "ХОСТ_ПОРТ:3000"
    networks:
      - coolify_network # Используем кастомное имя сети, чтобы было понятнее
    labels:
      - "traefik.enable=true"
      # Имя сервиса для Traefik: http-0-b8s4c4444kosg0s8co4c884s-scraperr (из твоего примера)
      - "traefik.http.services.http-0-b8s4c4444kosg0s8co4c884s-scraperr.loadbalancer.server.port=3000"

  scraperr_api: # API
    init: true
    image: jpyles0524/scraperr_api:latest
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      # Coolify будет использовать переменную ${scraperr_api_port} из Environment Variables.
      # API внутри контейнера слушает на порту 8000.
      - "${scraperr_api_port:-8000}" # Coolify должен заменить это на "ХОСТ_ПОРТ:8000"
    volumes:
      - "./data:/project/app/data"
      - "./media:/project/app/media"
    networks:
      - coolify_network # Оба сервиса в одной сети для общения
    labels:
      - "traefik.enable=true"
      # Имя сервиса для Traefik: http-0-b8s4c4444kosg0s8co4c884s-scraperr_api (из твоего примера)
      - "traefik.http.services.http-0-b8s4c4444kosg0s8co4c884s-scraperr_api.loadbalancer.server.port=8000"

networks:
  coolify_network: # Определяем нашу сеть
    driver: bridge # Стандартный драйвер
    # Coolify может создать свою управляемую сеть и подключить контейнеры к ней,
    # в таком случае эта секция networks может быть не нужна, либо Coolify ее переопределит.
    # Если Coolify автоматически помещает все сервисы из одного docker-compose в одну общую сеть,
    # то явное определение сети здесь и в сервисах можно убрать.
    # Проверим документацию Coolify или поэкспериментируем.
    # Пока оставим так для явности.
